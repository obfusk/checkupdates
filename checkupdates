#!/usr/bin/python3
# encoding: utf-8

# --                                                            ; {{{1
#
# File        : checkupdates
# Maintainer  : Felix C. Stegerman <flx@obfusk.net>
# Date        : 2021-01-04
#
# Copyright   : Copyright (C) 2020  Felix C. Stegerman
# Version     : v0.0.1
# License     : GPLv3+
#
# --                                                            ; }}}1

                                                                # {{{1
r"""

>>> latest_version("python3")
'3.9.1'

"""                                                             # }}}1

import os, re, sys
from pathlib import Path

import click, requests

GH_API      = "https://api.github.com"
GH_RELEASES = GH_API + "/repos/{}/{}/releases"
GH_TAGS     = GH_API + "/repos/{}/{}/tags"
PYPI_JSON   = "https://pypi.org/pypi/{}/json"

GH_RX       = r"https://github\.com/([^/]+)/([^/]+)/"
PYPI_RX     = r"https?://pypi\.python\.org/"

LATEST      = dict(
  boost     = (True , "https://www.boost.org/",
                     r"history/version.*Version\s*([\d.]+)"),
  curl      = (False, "https://curl.haxx.se/download/",
                     r"curl-([\d.]+).zip"),
  openssl   = (True , "https://www.openssl.org/source/",
                     r"openssl-(1[\d.]+[a-z]?).tar.gz"),
  libpcre   = (False, "https://ftp.pcre.org/pub/pcre/",
                     r"pcre-([\d.]+)\.zip"),
  libxml2   = (False, "http://xmlsoft.org/sources/",          # HTTP!
                     r"libxml2-([\d.]+).tar.gz"),
  libxslt   = (False, "http://xmlsoft.org/sources/",          # HTTP!
                     r"libxslt-([\d.]+).tar.gz"),
  python3   = (True , "https://www.python.org/downloads/",
                     r"https://www\.python\.org/ftp/python/([\d.]+)/"),
  sdl2      = (False, "https://www.libsdl.org/release/",
                     r"SDL2-([\d.]+).tar.gz"),
  sqlite3   = (True , "https://www.sqlite.org/index.html",
                     r"releaselog.*Version\s*([\d.]+)"),
)
LATEST["hostpython3"] = LATEST["python3"]

PYPI_RENAME = dict(
  dateutil  = "python-dateutil",
  mysqldb   = "MySQL-python",
  zope      = "zope.interface",
)

P4A_SKIP    = "android brokenrecipe genericndkbuild pil".split()

BRANCHES    = "master main develop".split()

def get(url, hdrs = {}):
  (resp := requests.get(url, headers = hdrs)).raise_for_status()
  return resp

def gh_get(url):
  token = os.environ.get("GITHUB_TOKEN") or None
  hdrs  = dict(Authorization = "token " + token) if token else {}
  return get(url, hdrs)

def get_paginated(get_f, url, **kw):
  while url:
    resp  = get_f(url, **kw)
    url   = resp.links.get("next", {}).get("url")
    for x in resp.json(): yield x

# FIXME: use other hashes (in url) (too)
def version_url_hash(p):
  v, u, h = None, None, None
  if p.exists():
    with p.open() as f:
      for line in f:
        if m := re.search(r"""version\s*=\s*['"]v?(\S+)['"]""", line): v = m[1]
        if m := re.search(r"""url\s*=\s*['"](\S+)['"]"""      , line): u = m[1]
        if m := re.search(r"""md5sum\s*=\s*['"](\S+)['"]"""   , line): h = m[1]
  return v, u, h

def latest_version(name, url = None, cur = None, pypi = False): # {{{1
  try:
    if name in LATEST:
      v             = None
      fst, url, rx  = LATEST[name]
      for line in get(url).iter_lines():
        if m := re.search(rx, line.decode()):
          v = m[1]
          if fst: break
      return v
    elif url:
      if m := re.match(GH_RX, url):
        for r in get_paginated(gh_get, GH_RELEASES.format(m[1], m[2])):
          if r["draft"] or r["prerelease"]: continue
          t = r["tag_name"]
          if t.startswith(name + "-"): t = t[len(name)+1:]
          return t[1:] if t.startswith("v") else t
        for r in get_paginated(gh_get, GH_TAGS.format(m[1], m[2])):
          t = r["name"]
          if t.startswith(name + "-"): t = t[len(name)+1:]
          if not re.fullmatch(r"v?[\d.]+", t): continue
          return t[1:] if t.startswith("v") else t
        if cur in BRANCHES: return cur
        return None
    if pypi or (url and re.match(PYPI_RX, url)):
      name = PYPI_RENAME.get(name, name)
      return get(PYPI_JSON.format(name)).json()["info"]["version"]
  except requests.exceptions.HTTPError as e:
    msg = click.style("[HTTP ERROR]", fg = "red")
    click.echo("{} {} {}".format(msg, name, e), file = sys.stderr)
    return None
  return None
                                                                # }}}1

@click.group()
@click.option("-v", "--verbose", is_flag = True)
@click.pass_context
def cli(ctx, **kw):
  ctx.obj = dict(kw)

@cli.command()
@click.pass_context
def p4a_recipes(ctx):                                           # {{{1
  cwd, old, fail, ok = Path("."), [], [], 0
  for p in sorted(cwd.iterdir(), key = lambda p: p.name):
    if not p.is_dir() or p.name in P4A_SKIP: continue
    init, orig = p / "__init__.py", p / ("_" + p.name + ".py")
    if init.exists():
      iv, iu, ih  = version_url_hash(init)
      ov, ou, oh  = version_url_hash(orig)
      cv, cu, ch  = iv or ov, iu or ou, ih or oh
      lv          = latest_version(p.name, cu, cv)
      if ctx.obj["verbose"]:
        click.echo("==> {}".format(p.name))
        if lv: click.echo("  latest  version : {}".format(lv))
        if iv: click.echo("  init    version : {}".format(iv))
        if ov: click.echo("  orig    version : {}".format(ov))
        if iu: click.echo("  init        url : {}".format(iu))
        if ou: click.echo("  orig        url : {}".format(ou))
        if ih: click.echo("  init     md5sum : {}".format(ih))
        if oh: click.echo("  orig     md5sum : {}".format(oh))
      if cu and "http:" in cu:
        msg = click.style("[USES HTTP]", fg = "red")
        click.echo("{} {}".format(msg, p.name))
      if not (cv and lv):
        fail.append(p.name)
      elif cv != lv:
        old.append((p.name, cv, lv, ch))
      else:
        ok += 1
  p4a_report(ctx, old, fail, ok)
                                                                # }}}1

@cli.command()
@click.option("-r", "--p4a-recipes", multiple = True,
  type = click.Path(exists = True, file_okay = False),
  help = "p4a recipe dir(s)")
@click.pass_context
def buildozer_spec(ctx, p4a_recipes):                           # {{{1
  for p in "p4a-recipes .p4a/pythonforandroid/recipes".split():
    if Path(p).exists():
      if ctx.obj["verbose"]:
        click.echo("[detected p4a recipes in {}]".format(p))
      p4a_recipes += (p,)
  reqs = None
  with open("buildozer.spec") as f:
    for line in f:
      if m := re.match(r"requirements\s*=(.*)", line):
        reqs = m[1].strip()
        while not reqs or reqs.endswith(","):
          reqs += next(f).strip()
        reqs = reqs.split(",")
        break
  if not reqs:
    click.echo("no requirements found", file = sys.stderr)
    ctx.exit(2)
  old, fail, ok = [], [], 0
  for req in sorted(reqs):
    if "==" in req:
      name, sv = req.split("==")
      if sv.startswith("v"): sv = sv[1:]
    else:
      name, sv = req, None
    if name in P4A_SKIP: continue
    rv, ru = None, None
    for p in map(Path, p4a_recipes):
      init = p / name / "__init__.py"
      if init.exists():
        v, u, h = version_url_hash(init)
        rv, ru  = rv or v, ru or u
    sv = sv or rv
    lv = latest_version(name, ru, sv, True)
    if ctx.obj["verbose"]:
      click.echo("==> {}".format(name))
      if lv: click.echo("  latest  version : {}".format(lv))
      if sv: click.echo("  spec    version : {}".format(sv))
      if rv: click.echo("  recipe  version : {}".format(rv))
      if ru: click.echo("  recipe      url : {}".format(ru))
    if not (sv and lv):
      fail.append(name)
    elif sv != lv:
      old.append((name, sv, lv, None))
    else:
      ok += 1
  p4a_report(ctx, old, fail, ok)
                                                                 # }}}1

def p4a_report(ctx, old, fail, ok):
  for name in fail:
    msg = click.style("[CHECK FAILED]", fg = "red")
    click.echo("{} {}".format(msg, name))
  for name, cur, new, md5 in old:
    if md5: cur += " (" + md5 + ")"                           #   FIXME
    msg = click.style("[POSSIBLY OUTDATED]", fg = "yellow")
    click.echo("{} {} = {} -> {}".format(msg, name, cur, new))
  click.echo("{} ok, {} outdated, {} failed"
             .format(ok, len(old), len(fail)))
  if fail: ctx.exit(2)
  if old : ctx.exit(1)

@cli.command("_doctest", hidden = True)
@click.pass_context
def doctest(ctx):
  import doctest
  if doctest.testmod()[0]: ctx.exit(1)

if __name__ == "__main__":
  cli()

# vim: set tw=70 sw=2 sts=2 et fdm=marker :
